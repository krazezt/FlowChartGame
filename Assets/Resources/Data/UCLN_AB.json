{
  "variables": [0, 0, 0],
  "functionBlocks": [
    {
      "id": 3,
      "blockTypeID": 0,
      "text": "Start",
      "connectBlocks": [],
      "nextBlocks": [4]
    },
    {
      "id": 4,
      "blockTypeID": 7,
      "text": "Input A, B",
      "connectBlocks": [],
      "nextBlocks": [5]
    },
    {
      "id": 5,
      "blockTypeID": 2,
      "text": "A = B",
      "connectBlocks": [0, 1],
      "nextBlocks": [6, 7]
    },
    {
      "id": 6,
      "blockTypeID": 1,
      "text": "UCLN = A",
      "connectBlocks": [2, 0],
      "nextBlocks": [10]
    },
    {
      "id": 7,
      "blockTypeID": 5,
      "text": "A > B",
      "connectBlocks": [0, 1],
      "nextBlocks": [8, 9]
    },
    {
      "id": 8,
      "blockTypeID": 9,
      "text": "A = A - B",
      "connectBlocks": [0, 1, 0],
      "nextBlocks": [5]
    },
    {
      "id": 9,
      "blockTypeID": 9,
      "text": "B = B - A",
      "connectBlocks": [1, 0, 1],
      "nextBlocks": [5]
    },
    {
      "id": 10,
      "blockTypeID": 12,
      "text": "End",
      "connectBlocks": [2, 0, 1],
      "nextBlocks": []
    }
  ],
  "testCases": [
    {
      "testCaseTypeID": 0,
      "text": "A = 4\nB = 6",
      "casePairs": [
        { "value": 4, "variableBlockIndex": 0 },
        { "value": 6, "variableBlockIndex": 1 }
      ]
    },
    {
      "testCaseTypeID": 0,
      "text": "A = 12\nB = 15",
      "casePairs": [
        { "value": 12, "variableBlockIndex": 0 },
        { "value": 15, "variableBlockIndex": 1 }
      ]
    }
  ],
  "validateCode": "int result = 0, i; for (i = Math.Min(inputValues[0].GetOutputValue(), inputValues[1].GetOutputValue()); i >= 1; i--) if (inputValues[0].GetOutputValue() % i == 0 && inputValues[1].GetOutputValue() % i == 0) return checkValue.GetOutputValue() == i; return checkValue.GetOutputValue() == i;"
}
